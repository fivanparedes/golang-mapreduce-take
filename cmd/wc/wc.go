package main

import (
	"fmt"
	mapreduce "laboratorio-4/pkg"
	"os"
	"strconv"
	"strings"
	"unicode"
)

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {

	//Funcion para dividir el string cuando el caracter NO es una letra, se utilizar√° mas adelante
	IsLetter := func(y rune) bool { //rune es un alias para el int32 (ver docs de unicode)
		return !unicode.IsLetter(y) //devuelve true si NO es una letra
	}

	for _, word := range strings.FieldsFunc(value, IsLetter) { //itera
		res = append(res, mapreduce.KeyValue{word, "1"})	//no esta claro por que "1", pero calculo que acumula o suma 1 por cada ocurrencia encontrada
	}

	return res
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// TODO: you also have to write this function
	cant := 0
	for _, val := range values {
		i, err := strconv.Atoi(val) // convierte cada "1" de los registros a int
		if err != nil {
			fmt.Println(err)
		}
		cant += i
	}
	return strconv.Itoa(cant)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
